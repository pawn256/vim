#!/usr/bin/env node

'use strict';

var program = require('commander');
var concat = require('concat-stream');

var termcolors = require('../pkg');
var pkg = require('../package.json');

program
  .version(pkg.version)
  .option('-l, --list', 'List available formats')
  .option('-i, --input [format]', 'Input format')
  .option('-o, --output [format]', 'Output format')
  .option('-v, --verbose', 'Display warning messages')
  .parse(process.argv);

if (program.list) {
  for (var key in termcolors) {
    if (! termcolors.hasOwnProperty(key)) {
      continue;
    }
    var format = termcolors[key];
    var canImport = format.hasOwnProperty('import');
    var canExport = format.hasOwnProperty('export');

    if (!canExport && !canImport) {
      continue;
    }

    // ugh, hacky way to pad a string with spaces
    var line = (key + "            ").slice(0, 12);

    if (canExport) {
      line += ' [export]';
    }
    if (canImport) {
      line += ' [import]';
    }

    console.log(line);
  }
  return;
}

if (!(program.input && program.output)) {
  console.log('Must declare input and output formats');
  return;
}

if (!(termcolors[program.input] && termcolors[program.input].import)) {
  console.log('Invalid input format: ', program.input);
  return;
}

if (!(termcolors[program.output] && termcolors[program.output].export)) {
  console.log('Invalid output format: ', program.output);
  return;
}

// read all data from stdin
process.stdin.pipe(concat(function (buffer) {
  var contents = buffer.toString('utf8');
  var colors = termcolors[program.input].import(contents);

  if (program.verbose) { checkColors(colors); }
  termcolors.defaults.fill(colors);

  var output = termcolors[program.output].export(colors);
  console.log(output);
}));

function checkColors (colors) {
  var valid = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    'foreground', 'background'];
  var missing = [];

  for (var i = 0; i < 18; i += 1) {
    if (! colors.hasOwnProperty(valid[i])) {
      missing.push(valid[i]);
    }
  }

  if (missing.length) {
    console.log('# MISSING', missing.join());
  }
}
