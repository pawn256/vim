'use strict';

var _ = require('lodash');

var Colr = require('colr');
var createExporter = require('../exporter');

var template = "! special\n*.foreground:   {{=c.foreground}}\n*.background:   {{=c.background}}\n*.cursorColor:  {{=c.foreground}}\n\n! black\n*.color0:       {{=c[0]}}\n*.color8:       {{=c[8]}}\n\n! red\n*.color1:       {{=c[1]}}\n*.color9:       {{=c[9]}}\n\n! green\n*.color2:       {{=c[2]}}\n*.color10:      {{=c[10]}}\n\n! yellow\n*.color3:       {{=c[3]}}\n*.color11:      {{=c[11]}}\n\n! blue\n*.color4:       {{=c[4]}}\n*.color12:      {{=c[12]}}\n\n! magenta\n*.color5:       {{=c[5]}}\n*.color13:      {{=c[13]}}\n\n! cyan\n*.color6:       {{=c[6]}}\n*.color14:      {{=c[14]}}\n\n! white\n*.color7:       {{=c[7]}}\n*.color15:      {{=c[15]}}\n";

/*
 * Regexes
 */

var hex = '(?:' +
  '\\[\\d*\\])?' + // opacity
  '\\s*' + // space
  '(' +
    '#[a-f0-9]{6}' + // hex
  '|' + // or
    'rgb:[a-f0-9]{1,2}\/[a-f[0-9]{1,2}\/[a-f0-9]{1,2}' + // rgb
  ')';

var regex = {
  color: new RegExp('(?:rxvt|term|^\\s*|^\\s*\\*)(?:\\*|\\.)?(foreground|background|color(\\d{1,2}))\\s*:\\s*'+hex, 'mig'),
  define: new RegExp('^#define\\s*([a-z0-9_]+)\\s*'+hex+'\\s*$', 'mig'),
  comment: /^\s*!.*$/mg
};

var DEFAULT_COLORS = '\n' +
  '#define black   #000000\n' +
  '#define red     #CC0403\n' +
  '#define green   #19CB00\n' +
  '#define yellow  #CECB00\n' +
  '#define blue    #001CD1\n' +
  '#define magenta #CB1ED1\n' +
  '#define cyan    #0DCDCD\n' +
  '#define white   #E5E5E5\n';

var VALID_COLORS = [
  '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', '10', '11', '12', '13', '14', '15',
  'foreground', 'background'
];

module.exports = {


  /*
   * xresources.import
   *
   * - input (string) : text to parse
   * > colors (object)
   */

  import: function (input) {
    var output = {};
    var match, search;

    // remove comments
    input = input.replace(regex.comment, '');

    // add default colors
    input += DEFAULT_COLORS;

    // replace #define colors
    while ((match = regex.define.exec(input)) !== null) {
      search = new RegExp(':\\s*' + match[1] + '\\b', 'g');
      input = input.replace(search, ':' + match[2]);
    }

    // match colors
    while ((match = regex.color.exec(input)) !== null) {
      // if is colorN use N else use foreground/background
      var index = match[2] ? match[2] : match[1];
      var value = match[3];

      // ignore invalid color names
      if (VALID_COLORS.indexOf(index) < 0) { continue; }

      if (value.substring(0, 4) === 'rgb:') {
        var values = value.substring(4).split('/');
        for (var i = 0 ; i < 3; i += 1) {
          if (values[i].length === 1) {
            values[i] = values[i] + values[i];
          }
        }
        value = values.join('');
      }

      output[index] = Colr.fromHex(value);
    }

    return output;
  },

  export: createExporter(template, _.partialRight(_.mapValues, function (color) {
    return color.toHex();
  }))

};
